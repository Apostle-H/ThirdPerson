//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Source/InputActions/MainAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainAction"",
    ""maps"": [
        {
            ""name"": ""playerMovement"",
            ""id"": ""0d0c416b-b44e-4d1c-9072-a1ef86106200"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""38f2b29a-08d1-48fe-b845-9d6d10cd27a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""5e8f70cf-f6fe-4bde-8ad3-0359de87ae5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a1991957-0ef5-452d-a0fa-6737bb0699d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""44c6987c-5857-4da2-b16b-f6ef2f6f5701"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""92189552-afe0-422b-a74f-a5c3ca55711b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02f96d10-d8c3-4ca0-8e26-dd26fa96e3fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a06a13d-79c0-4509-a156-46f22f0eaa4e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ace2a753-51ca-4efa-bd45-673cb3e36548"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""inputControl"",
            ""id"": ""f92ba987-bef4-4622-8402-58e643af7f05"",
            ""actions"": [
                {
                    ""name"": ""OnOffInput"",
                    ""type"": ""Button"",
                    ""id"": ""49a8429d-b80b-46f2-892e-0a4600a319e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""afab8aef-c053-4b97-87df-7571c9a84ed4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnOffInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8a61e9eb-0220-41f9-b1ea-7a3af61ec8cc"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnOffInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6cebdcb3-14c6-4fb0-84d6-c957ad7d1b49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnOffInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""playerCombat"",
            ""id"": ""d04fcf04-639b-4c6a-b801-ca09182b47c9"",
            ""actions"": [
                {
                    ""name"": ""fire"",
                    ""type"": ""Button"",
                    ""id"": ""6d16affe-f86d-4c67-82dd-67246a1b85a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""87e4d164-1869-43d6-8604-35c8714d9ff2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // playerMovement
        m_playerMovement = asset.FindActionMap("playerMovement", throwIfNotFound: true);
        m_playerMovement_movement = m_playerMovement.FindAction("movement", throwIfNotFound: true);
        m_playerMovement_jump = m_playerMovement.FindAction("jump", throwIfNotFound: true);
        // inputControl
        m_inputControl = asset.FindActionMap("inputControl", throwIfNotFound: true);
        m_inputControl_OnOffInput = m_inputControl.FindAction("OnOffInput", throwIfNotFound: true);
        // playerCombat
        m_playerCombat = asset.FindActionMap("playerCombat", throwIfNotFound: true);
        m_playerCombat_fire = m_playerCombat.FindAction("fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // playerMovement
    private readonly InputActionMap m_playerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_playerMovement_movement;
    private readonly InputAction m_playerMovement_jump;
    public struct PlayerMovementActions
    {
        private @MainAction m_Wrapper;
        public PlayerMovementActions(@MainAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_playerMovement_movement;
        public InputAction @jump => m_Wrapper.m_playerMovement_jump;
        public InputActionMap Get() { return m_Wrapper.m_playerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @jump.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerMovementActions @playerMovement => new PlayerMovementActions(this);

    // inputControl
    private readonly InputActionMap m_inputControl;
    private IInputControlActions m_InputControlActionsCallbackInterface;
    private readonly InputAction m_inputControl_OnOffInput;
    public struct InputControlActions
    {
        private @MainAction m_Wrapper;
        public InputControlActions(@MainAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnOffInput => m_Wrapper.m_inputControl_OnOffInput;
        public InputActionMap Get() { return m_Wrapper.m_inputControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputControlActions set) { return set.Get(); }
        public void SetCallbacks(IInputControlActions instance)
        {
            if (m_Wrapper.m_InputControlActionsCallbackInterface != null)
            {
                @OnOffInput.started -= m_Wrapper.m_InputControlActionsCallbackInterface.OnOnOffInput;
                @OnOffInput.performed -= m_Wrapper.m_InputControlActionsCallbackInterface.OnOnOffInput;
                @OnOffInput.canceled -= m_Wrapper.m_InputControlActionsCallbackInterface.OnOnOffInput;
            }
            m_Wrapper.m_InputControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OnOffInput.started += instance.OnOnOffInput;
                @OnOffInput.performed += instance.OnOnOffInput;
                @OnOffInput.canceled += instance.OnOnOffInput;
            }
        }
    }
    public InputControlActions @inputControl => new InputControlActions(this);

    // playerCombat
    private readonly InputActionMap m_playerCombat;
    private IPlayerCombatActions m_PlayerCombatActionsCallbackInterface;
    private readonly InputAction m_playerCombat_fire;
    public struct PlayerCombatActions
    {
        private @MainAction m_Wrapper;
        public PlayerCombatActions(@MainAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @fire => m_Wrapper.m_playerCombat_fire;
        public InputActionMap Get() { return m_Wrapper.m_playerCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCombatActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCombatActions instance)
        {
            if (m_Wrapper.m_PlayerCombatActionsCallbackInterface != null)
            {
                @fire.started -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnFire;
                @fire.performed -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnFire;
                @fire.canceled -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_PlayerCombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @fire.started += instance.OnFire;
                @fire.performed += instance.OnFire;
                @fire.canceled += instance.OnFire;
            }
        }
    }
    public PlayerCombatActions @playerCombat => new PlayerCombatActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IInputControlActions
    {
        void OnOnOffInput(InputAction.CallbackContext context);
    }
    public interface IPlayerCombatActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
